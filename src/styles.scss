@use "sass:map";
// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();


// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$protfolio-site-angular-primary: mat.define-palette(mat.$indigo-palette);
$protfolio-site-angular-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);

// The warn palette is optional (defaults to red).
$protfolio-site-angular-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$protfolio-site-angular-theme: mat.define-light-theme((
  color: (
    primary: $protfolio-site-angular-primary,
    accent: $protfolio-site-angular-accent,
    warn: $protfolio-site-angular-warn,
  ),
  typography: mat.define-typography-config(),
  density: 0
));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($protfolio-site-angular-theme);

/* You can add global styles to this file, and also import other style files */
body {
  margin: 0;
  background: red;
}

#app-wrapper {
  max-width: calc(100dvw - 16px);
  margin: auto !important;
}

$padding-margin-map: (
  p: padding,
  m: margin
);
$padding-margin: p, m;
@for $i from 0 through 16 {
  @each $pm in $padding-margin {
    $calc: calc(#{$i} * 4px);
    .#{$pm}t-#{$i} {
      #{map.get($padding-margin-map, $pm)}-top: $calc !important;
    }
    .#{$pm}r-#{$i} {
      #{map.get($padding-margin-map, $pm)}-right: $calc !important;
    }
    .#{$pm}b-#{$i} {
      #{map.get($padding-margin-map, $pm)}-bottom: $calc !important;
    }
    .#{$pm}l-#{$i} {
      #{map.get($padding-margin-map, $pm)}-left: $calc !important;
    }
    .#{$pm}x-#{$i} {
      #{map.get($padding-margin-map, $pm)}-left: $calc !important;
      #{map.get($padding-margin-map, $pm)}-right: $calc !important;
    }
    .#{$pm}y-#{$i} {
      #{map.get($padding-margin-map, $pm)}-top: $calc !important;
      #{map.get($padding-margin-map, $pm)}-bottom: $calc !important;
    }
    .#{$pm}a-#{$i} {
      #{map.get($padding-margin-map, $pm)}: $calc !important;
    }
  }
}

$height-width: height, width;
@for $i from 0 through 10 {
  @each $direction in $height-width {
    .#{$direction}-#{$i * 10} {
      #{$direction}: calc(#{$i} * 10%);
    }
  }
}

@for $i from 0 through 20 {
  @each $direction in $height-width {
    $calc: #{$i * 50px};
    .max-#{$direction}-#{$i * 50} {
      max-#{$direction}: $calc;
    }
    .min-#{$direction}-#{$i * 50} {
      min-#{$direction}: $calc;
    }
    .set-#{$direction}-#{$i * 50} {
      min-#{$direction}: $calc;
      max-#{$direction}: $calc;
    }
  }
}

mat-icon {
  .x-small {
    height: 8px;
  }
  .small {
    height: 12px;
  }
}

button.mdc-button {
  &.large {
    min-height: 48px;
  }
  &.x-large {
    min-height: 64px;
  }
}

$align-justify: align, justify;
$content-options: content, items, self;
$locations: start, center, end, baseline, space-around, space-between;
@each $direction in $align-justify {
  @each $option in $content-options {
    @each $loc in $locations {
      .#{$direction}-#{$option}-#{$loc} {
        #{$direction}-#{$option}: $loc;
      }
    }
  }
}

.font-weight-bold {
  font-weight: bold !important;
}
@for $i from 1 through 10 {
  $calc: #{$i * 100};
  .font-weight-#{$calc} {
    font-weight: $calc !important;
  }
}

.d-flex {
  display: flex;
}
.flex-column {
  flex-direction: column;
}

@mixin display-grid ($grid-template-columns, $grid-template-rows) {
  display: grid;
  grid-template-columns: $grid-template-columns;
  grid-template-rows: $grid-template-rows;
}

html, body { height: 100%; }
